stages:
  - lint
  - build
  - release
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

image: node:12-alpine



lint:
  stage: lint
  script:
    - npm i
    - npm run lint

    

build:
  stage: build
  script:
    - npm run build
  artifacts:
      expire_in: 15 mins
      paths:
        - build



release:
  image: docker:stable
  stage: release
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  tags:
    - docker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build 
      --cache-from $CI_REGISTRY_IMAGE:latest 
      --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG
      -t $CI_REGISTRY_IMAGE:latest 
      -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG 
      -f production.Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - tags
  except:
    - /^(?!master).+@/



deploy:
  image: ubuntu:latest
  stage: deploy
  variables:
    SERVICE_NAME: some_app
  tags:
    - docker
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $VPS_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh root@$VPS_HOST "
        docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY &&
        docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG &&
        docker service update --image $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $SERVICE_NAME "
  only:
    - tags
  except:
    - /^(?!master).+@/